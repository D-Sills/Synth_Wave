local audio_manager = require("scripts.modules.audio_manager")

-- go.property("movementSpeed", 200)
go.property("max_health", 3)

-- below values in beats
go.property("shootCooldown", 0.2)
go.property("invulnerabilityTime", 2) -- idk if needed

function init(self)
	--msg.post("main:/camera", "follow", { target = hash("level/#player"), lerp = 0.7, horizontal = true, vertical = true, immediate = true })
	msg.post("gui", "register")
	--msg.post("gui", "register_analog", { id = "analog", radius = 80 })
	msg.post("gui", "register_analog", { id = "analog", radius = 80 })
	msg.post("gui", "register_button", { id = "shoot_button" })
	self.velocity = vmath.vector3()
	audio_manager.subscribe(msg.url())

	self.time_since_last_shot = 0 
	self.hp = self.max_health
	self.is_invulnerable = false
    self.invuln_timer = 0
	self.should_flash = false

	self.power_up_timers = {}
	self.attack_power = 1
	self.is_dealing_double_damage = false
	self.is_firing_spread_bullets = false
	self.is_shooting_large_bullets = false
	self.shields = 0

	msg.post("/gui#hud", "update", { hp = self.hp, max_hp = self.max_hp })
	msg.post("/hp#health_display", "update_health", { health = self.hp, max_health = self.max_health, shields = self.shields })
end

function update(self, dt)
	-- movement
	--go.set_position(go.get_position() + self.velocity * dt)
	--go.set_position(go.get_position("weapon") + self.velocity * dt, "weapon")


	-- fire rate
	if self.time_since_last_shot >= 0 then
		self.time_since_last_shot = self.time_since_last_shot - dt -- maybe beats but feels bad like that (OwO)-b
	end
    
    -- flash when invulnerable
    if self.should_flash then
		local current_tint = go.get("#base", "tint")
		local new_tint = current_tint.w == 1 and vmath.vector4(1, 0, 0, 0.5) or vmath.vector4(1, 1, 1, 1)
		go.set("#base", "tint", new_tint)
	end
end

local function fire_bullet(self, spawn_position, forward_vector, weapon_rotation_quat)
    local id = factory.create("#laserfactory", spawn_position, weapon_rotation_quat)
	
    -- adjust projectile based on power-ups
    if self.is_shooting_large_bullets then
        -- increase the size of the bullet
        go.set_scale(vmath.vector3(2.5, 2.5, 1), id)
    end

	-- turn red when double damage
	if self.is_dealing_double_damage then
		-- Change the color of the bullet
		-- go.set(id.."#sprite", "tint", vmath.vector4(1, 0, 0, 1)) idk why this doesnt work
	end

	self.attack_power = self.is_dealing_double_damage and 2 or 1

    -- Projectile movement logic
    local projectile_speed = 500 
    local move_distance = 1500
    local target_position = spawn_position + forward_vector * move_distance
    local travel_time = move_distance / projectile_speed

	audio_manager.play_sound_effect("Combat/laserSmall")
	
    go.animate(id, "position", go.PLAYBACK_ONCE_FORWARD, target_position, go.EASING_LINEAR, travel_time, 0, function()
        go.delete(id)
    end)
end

local function die(self) 
	msg.post("main:/camera", "shake", { duration = 0.5, magnitude = 0.05 })
	msg.post("/gui#floating_text", "show_floating_text", { position = go.get_position(), text = "You Died" })
	msg.post("main:/game_manager#game_manager", "end_level")
	audio_manager.play_sound_effect("Combat/Death")
	--go.delete()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("beat") then
        if self.is_invulnerable then
            if self.invulnerabilityTime > 0 then
                self.invulnerabilityTime = self.invulnerabilityTime - 1
            end

            if self.invulnerabilityTime <= 0 then
                self.is_invulnerable = false
                self.should_flash = false
               -- go.set(".", "tint", vmath.vector4(1, 1, 1, 1))  -- Reset to normal color
            end
        end

		for power_up_type, duration in pairs(self.power_up_timers) do
			self.power_up_timers[power_up_type] = duration - 1
			if self.power_up_timers[power_up_type] <= 0 then
				self.power_up_timers[power_up_type] = nil
				-- Reset the effect
				if power_up_type == "large_shots" then
					self.is_shooting_large_bullets = false
				elseif power_up_type == "double_damage" then
					self.is_dealing_double_damage = false
				elseif power_up_type == "spiral_bullets" then
					self.is_firing_spread_bullets = false
				end
			end
		end
	elseif message_id == hash("onscreen_button") and message.id == hash("shoot_button") and message.released then
		if self.time_since_last_shot <= 0 then
			local rating = audio_manager.handle_player_action()

			local base_forward_vector = vmath.vector3(0, 1, 0)
			local weapon_rotation_quat = go.get_rotation("/weapon#weapon")
			
			local forward_vector = vmath.rotate(weapon_rotation_quat, base_forward_vector)
			-- fefine the offset distance in front of the player where the projectile will spawn
			local offset_distance = 30
			local weapon_position = go.get_world_position("/weapon#weapon")
			local spawn_position = weapon_position + forward_vector * offset_distance
			
			if self.time_since_last_shot <= 0 then
				if self.is_firing_spread_bullets then
					local spread_angle = math.rad(6)  -- Angle for the spread; adjust as needed
			
					-- Fire bullet straight forward
					fire_bullet(self, spawn_position, forward_vector, weapon_rotation_quat)
			
					-- Rotate the forward vector to the left
					local left_rotation = vmath.quat_rotation_z(-spread_angle)
					local left_vector = vmath.rotate(left_rotation, forward_vector)
					fire_bullet(self, spawn_position, left_vector, weapon_rotation_quat)
			
					-- Rotate the forward vector to the right
					local right_rotation = vmath.quat_rotation_z(spread_angle)
					local right_vector = vmath.rotate(right_rotation, forward_vector)
					fire_bullet(self, spawn_position, right_vector, weapon_rotation_quat)
				else
					fire_bullet(self, spawn_position, forward_vector, weapon_rotation_quat)
				end
			
			
			
			msg.post("/gui#floating_text", "show_floating_rating", { text = rating })
			
			if rating == "Bad" then
				self.attack_power_multiplier = 0.5
			elseif rating == "Good" then 
				self.attack_power_multiplier = 1
			elseif rating == "Perfect" then
				self.attack_power_multiplier = 1.5
			end
			
			self.time_since_last_shot = self.shootCooldown
	        else
			end
        end
	elseif message_id == hash("onscreen_analog") and message.id == hash("analog") then
        local angle = math.atan2(message.y, message.x) - math.pi / 2
        local target_rotation = vmath.quat_rotation_z(angle)
        go.set_rotation(target_rotation, "/weapon#weapon")
	elseif message_id == hash("take_damage") then
		if not self.is_invulnerable then
			if  self.shields > 0 then
				self.shields = self.shields - 1
			else
				self.hp = self.hp - message.damage
			end

			audio_manager.play_sound_effect("Combat/Impact")
			msg.post("/hp#health_display", "update_health", { health = self.hp, max_health = self.max_health, shields = self.shields })
			if self.hp <= 0 then
				die(self)
			else
				-- begin invulnerability period
				self.is_invulnerable = true
				self.invuln_timer = self.invulnerabilityTime
				
				self.should_flash = true
			end
		end
	elseif message_id == hash("power_up_collected") then
		if message.type == 1 then
			if self.hp < self.max_health then self.hp = self.hp + 1 end
			msg.post("/gui#hud", "update_health", { health = self.hp, max_health = self.max_health, shields = self.shields })
			msg.post("/gui#floating_text", "show_floating_text", { position = go.get_position() + vmath.vector3(0,40,0), text = "+1 HP" })
        elseif message.type == 2 then
            self.is_shooting_large_bullets = true
            self.power_up_timers["large_shots"] = 10  -- 10 beats of larger shots
            msg.post("/gui#floating_text", "show_floating_text", { position = go.get_position() + vmath.vector3(0,40,0), text = "Large Shots" })
        elseif message.type == 3 then
            self.is_dealing_double_damage = true
            self.power_up_timers["double_damage"] = 10  -- 10 beats of double damage
            msg.post("/gui#floating_text", "show_floating_text", { position = go.get_position() + vmath.vector3(0,40,0), text = "Double Damage" })
        elseif message.type == 4 then
            self.is_firing_spread_bullets = true
            self.power_up_timers["spiral_bullets"] = 10  -- 10 beats of spiral bullets
            msg.post("/gui#floating_text", "show_floating_text", { position = go.get_position() + vmath.vector3(0,40,0), text = "Spread Bullets" })
		elseif message.type == 5 then
			self.shields = self.shields + 1
			msg.post("/hp#health_display", "update_health", { health = self.hp, max_health = self.max_health, shields = self.shields })
			msg.post("/gui#floating_text", "show_floating_text", { position = go.get_position() + vmath.vector3(0,40,0), text = "+1 Shield" })
		end
		audio_manager.play_sound_effect("Combat/Pickup")
	
	elseif message_id == hash("get_damage_to_take") then
		msg.post(sender, "take_damage", { damage = self.attack_power * self.attack_power_multiplier })
	end
end

function final(self)
	msg.post("onscreen", "unregister")
	audio_manager.unsubscribe(msg.url())
end
