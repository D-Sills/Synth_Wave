local audio_manager = require("scripts.modules.audio_manager")

local chosen_song = "level_1"

function init(self)

	msg.post("main:/game_manager#scene_fader", "fade_in", {duration = 0.5, callback = true})
	msg.post("main:/game_manager#game_manager", "get_high_scores")
	self.song_cards = {
        {node = gui.get_node("song1/panel"), song = "song1"},
        {node = gui.get_node("song2/panel"), song = "song2"},
        {node = gui.get_node("song3/panel"), song = "song3"}
    }

    self.play_button = gui.get_node("play/button")
    self.exit_button = gui.get_node("back/button")
    self.default_song_scale = gui.get_scale(self.song_cards[1].node)
    self.song_hover_scale = vmath.vector3(1.1, 1.1, 1)
    self.default_button_scale = gui.get_scale(self.play_button)
    self.button_hover_scale = vmath.vector3(0.35, 0.35, 1)

    -- Set the scale of the first song as selected by default
    gui.set_scale(self.song_cards[1].node, self.song_hover_scale)
    for i = 2, #self.song_cards do
        gui.set_scale(self.song_cards[i].node, self.default_song_scale)
    end
    --audio_manager.play_sound_effect("Voice/Welcome")
end

local function update_song_cards(self, high_scores)
    for _, card in ipairs(self.song_cards) do
        local song_data = high_scores[card.song]

        --local score_node = gui.get_node(card.song .. "_score")
        local rank_node = gui.get_node(card.song .. "_rank")
        local clear_node = gui.get_node(card.song .. "_clear")

        --local score_text = song_data and tostring(song_data.score) or "--"
        local rank_text = song_data and song_data.rank or "--"
        local clear_text = song_data and string.format("%.2f%%", song_data.clear_percentage) or "--,--%"

        --gui.set_text(score_node, "Score: " .. score_text)
        gui.set_text(rank_node, "Rank: " .. rank_text)
        gui.set_text(clear_node, "Clear: " .. clear_text)
    end
end


function on_message(self, message_id, message, sender)
	if message_id == hash("fade_in_done") then
		msg.post(".", "acquire_input_focus")

	end
	if message_id == hash("fade_out_done") then
		msg.post("main:/collections#collection_manager", "load", {collection = chosen_song})
		msg.post(".", "release_input_focus")
	end
	if message_id == hash("high_scores") then
        update_song_cards(self, message.scores)
    end
end

local function start_game()
    -- Logic to execute when button is clicked
    print("Button clicked!")
    audio_manager.stop_music(0.5)
    msg.post("main:/game_manager#scene_fader", "fade_out", {duration = 0.5, callback = true})
    
end

function on_input(self, action_id, action)
    for i, card in ipairs(self.song_cards) do
        if gui.pick_node(card.node, action.x, action.y) then
            if action.pressed and (action_id == hash("click") or action_id == hash("touch")) then
                audio_manager.play_sound_effect("UI/Okay")
                chosen_song = card.song

                -- Play the music preview for the selected song
                local music_preview = "Music/" .. card.song
                audio_manager.play_music(music_preview, 0.1)

                -- Update scales for song cards
                for j, other_card in ipairs(self.song_cards) do
                    local scale = (i == j) and self.song_hover_scale or self.default_song_scale
                    gui.set_scale(other_card.node, scale)
                end
                break  -- Exit the loop as we found the clicked song card
            end
        end
    end
    if gui.pick_node(self.play_button, action.x, action.y) then
        if action.pressed and (action_id == hash("click") or action_id == hash("touch")) then
            -- Play click sound
            audio_manager.play_sound_effect("UI/Okay")
            
            -- Trigger button action
            start_game()

            -- Scale back to default when clicked
            gui.set_scale(self.play_button, self.button_hover_scale)
        elseif action.released then
            -- Scale up for hover effect
            gui.set_scale(self.play_button, self.default_button_scale)
        end
    end
    if gui.pick_node(self.exit_button, action.x, action.y) then
        if action.pressed and (action_id == hash("click") or action_id == hash("touch")) then
            -- Play click sound
            audio_manager.play_sound_effect("UI/Okay")
            
            msg.post('.', "release_input_focus")
            -- Trigger button action
            msg.post("main:/game_manager#scene_fader", "fade_out", {duration = 0.5, callback = true})
            
            chosen_song = "main_menu" -- i'm lazy (O-O)-b
            
            -- Scale back to default when clicked
            gui.set_scale(self.exit_button, self.button_hover_scale)
        elseif action.released then
            -- Scale up for hover effect
            gui.set_scale(self.exit_button, self.default_button_scale)
        end
    end
end

function update(self, dt)
	audio_manager.update(dt)
end
