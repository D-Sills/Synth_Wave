local audio_manager = require("scripts.modules.audio_manager")
local utils = require("scripts.modules.utils")

function init(self)
	msg.post("main:/game_manager#scene_fader", "fade_in", {duration = 1, callback = true})
    
	-- buttons
	self.start_button = gui.get_node("start_button/button")
    self.default_scale = gui.get_scale(self.start_button)
    self.hover_scale = vmath.vector3(0.35, 0.35, 1)

    -- slider
    self.slider_handle = gui.get_node("handle")
    self.slider_fill = gui.get_node("slider_f")
    self.is_dragging = false
    self.audio_volume = 1.0
    self.max_x = gui.get_size(self.slider_fill).x
    self.min_x = 0

    msg.post("main:/game_manager#game_manager", "get_volume")
    msg.post("main:/game_manager#game_manager", "get_player_progress")

    --msg.post("main:/camera", "shake", { intensity = 0.05, duration = 2.5, direction = "both" })
    audio_manager.play_sound_effect("Voice/Welcome")
end

local function set_slider_value(self,volume) -- only called when loading the scene
    local new_x = volume * self.max_x  -- convert volume to position

    gui.set_position(self.slider_handle, vmath.vector3(new_x, gui.get_position(self.slider_handle).y, 0))
    gui.set_size(self.slider_fill, vmath.vector3(new_x, gui.get_size(self.slider_fill).y, 0))
    self.audio_volume = volume
end

local function set_xp_bar_value(self, xp, level)
    local xp_fill = gui.get_node("bar_f")
    local xp_text = gui.get_node("xp")
    local level_text = gui.get_node("level")

    gui.set_text(xp_text, xp .. " | " .. 100)
    gui.set_text(level_text, level)

    local xp_percentage = xp / 100
    local new_x = xp_percentage * gui.get_size(xp_fill).x

    gui.set_size(xp_fill, vmath.vector3(new_x, gui.get_size(xp_fill).y, 0))
end

local function start_game()
    -- start button clicked
    --audio_manager.stop_music(0.5)
    msg.post("main:/game_manager#scene_fader", "fade_out", {duration = 0.5, callback = true})
end

function update(self, dt)
	audio_manager.update(dt)
	
	if self.is_dragging then
        print("dragging")
    end
end

function on_input(self, action_id, action)
    if gui.pick_node(self.start_button, action.x, action.y) then -- start button
        if action.pressed and (action_id == hash("click") or action_id == hash("touch")) then
            audio_manager.play_sound_effect("UI/Okay")    
            start_game()

            gui.set_scale(self.start_button, self.hover_scale)
        elseif action.released then
            gui.set_scale(self.start_button, self.default_scale)
            msg.post(".", "release_input_focus")
        end
    end
    if gui.pick_node(self.slider_handle, action.x, action.y) then -- audio slider
        if action.pressed and (action_id == hash("click") or action_id == hash("touch")) then
            self.is_dragging = true
        end
    end
    if action.released then
        self.is_dragging = false
    end

    if self.is_dragging  then
        self.handle_pos = gui.get_position(self.slider_handle)
        local target_x = action.x - self.handle_pos.x
        self.target_x = math.max(self.min_x, math.min(target_x, self.max_x))
        local new_x = utils.lerp(self.handle_pos.x, self.target_x, 0.2)

        gui.set_position(self.slider_handle, vmath.vector3(new_x, gui.get_position(self.slider_handle).y, 0))
        gui.set_size(self.slider_fill, vmath.vector3(new_x, gui.get_size(self.slider_fill).y, 0))

        local volume = new_x / self.max_x
        audio_manager.set_volume(volume)

        -- save data
        msg.post("main:/game_manager#game_manager", "set_volume", {volume = volume})
    end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("fade_in_done") then
		msg.post(".", "acquire_input_focus")

        audio_manager.BPM = 125
        audio_manager.play_music("Music/TitleSong")
	end
	if message_id == hash("fade_out_done") then
		msg.post("main:/collections#collection_manager", "load", {collection = "song_selection"})
		msg.post(".", "release_input_focus")
	end
	if message_id == hash("load_volume") then
        set_slider_value(self, message.volume)
    end
    if message_id == hash("load_player_progress") then
        set_xp_bar_value(self, message.progress.xp, message.progress.level)
    end
end
