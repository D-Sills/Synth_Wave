function init(self)
	self.active_scene = nil
	msg.post(".", "acquire_input_focus")
end

local function load_with_loading_screen(self, collection_name)
	if self.active_scene then
		print("unload " .. self.active_scene)
		print("load " .. collection_name)
		if collection_name == self.active_scene then
		print("same scene")
			return
		end

		msg.post("main:/collections#" .. self.active_scene .. "_proxy", "release_input_focus")
		msg.post("main:/collections#" .. self.active_scene .. "_proxy", "unload")
	end
	self.active_scene = collection_name

	msg.post("main:/collections#loading_proxy", "async_load")
end

local function finish_load_scene(self)
	msg.post("main:/collections#loading_proxy", "unload")
	print("finish_load_scene")
	msg.post("main:/collections#" .. self.active_scene .. "_proxy", "async_load")
	msg.post("main:/collections#" .. self.active_scene .. "_proxy", "acquire_input_focus")
end

local function initial_load(self)
	self.active_scene = "splash"
	msg.post("main:/collections#" .. self.active_scene .. "_proxy", "async_load")
	msg.post("main:/collections#" .. self.active_scene .. "_proxy", "acquire_input_focus")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load") then
		load_with_loading_screen(self, message.collection)
	end

	if message_id == hash("initial_load") then
		initial_load(self)
	end

	if message_id == hash("proxy_loaded") then
        msg.post(sender, "init")
        msg.post(sender, "enable")
    end

    if message_id == hash("finish_load_scene") then
		finish_load_scene(self)
	end
end