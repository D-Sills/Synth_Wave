-- bumper.script
local audio_manager = require("scripts.modules.audio_manager")
local utils = require("scripts.modules.utils")

go.property("health", 3)
go.property("speed", 10)
go.property("rotation_speed", 20)

function init(self)
    audio_manager.subscribe(msg.url("."))
    self.screen_width = utils.get_screen_size().width
    self.screen_height = utils.get_screen_size().height
    self.target_pos = vmath.vector3(self.screen_width / 2, self.screen_height / 2 + 30, 0)
    --go.set(msg.url("#sprite"), "tint", vmath.vector4(1, 0, 0, 1))
end

function update(self, dt)
    local current_rotation = go.get_rotation()
    local delta_rotation = vmath.quat_rotation_z(math.rad(self.rotation_speed * dt))
    go.set_rotation(current_rotation * delta_rotation)
end


local function die(self)
    audio_manager.unsubscribe(msg.url("."))
    -- audio_manager.play_sound_effect("explosion_sound")
    --local particle_path = go.get_id("explosion_particlefx")  -- Replace with your actual particle FX component ID
    --particlefx.play(particle_path)
    go.delete()
end

function on_message(self, message_id, message, sender)
    if message_id == hash("beat") then
        local pos = go.get_position()
        local dir_to_player = self.target_pos - pos
        local distance_to_player = vmath.length(dir_to_player)

        if distance_to_player > 10 then -- Stopping distance
            local move_dir = vmath.normalize(dir_to_player)
            local move_distance = self.speed -- Adjust this value if you want bigger or smaller jumps
            local new_pos = pos + move_dir * move_distance
            print("new pos:" .. pos.x .. "," .. pos.y)
            go.set_position(new_pos)
        end
        
    elseif message_id == hash("collision_response") then
        print (message.other_id)
        -- hash needs to include the collection proxy
        if (message.other_id == hash("/player")) then
            -- Player collision
            print ("collision player")
            msg.post(message.other_id, "take_damage", {damage = 1})
            die(self)
        elseif (message.group == hash("bullet")) then
            -- Bullet collision
            print("collision bullet")
            go.delete(message.other_id)
            die(self)
        end
    end
end