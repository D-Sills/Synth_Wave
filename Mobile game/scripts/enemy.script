-- bumper.script
local audio_manager = require("scripts.modules.audio_manager")
local utils = require("scripts.modules.utils")

go.property("health", 3)
go.property("speed", 10)
go.property("rotation_speed", 20)
go.property("score_value", 100)

function init(self)
    audio_manager.subscribe(msg.url("."))
    self.screen_width = utils.get_screen_size().width
    self.screen_height = utils.get_screen_size().height
    self.target_pos = vmath.vector3(self.screen_width / 2, self.screen_height / 2 + 30, 0)
    
    self.speed = self.speed * math.random(0.8, 1.2)
    self.rotation_speed = self.rotation_speed * math.random(0.8, 1.2)
    
    self.speed = self.speed * utils.get_difficulty()
    --go.set(msg.url("#sprite"), "tint", vmath.vector4(1, 0, 0, 1))
end

function update(self, dt)
    local current_rotation = go.get_rotation()
    local delta_rotation = vmath.quat_rotation_z(math.rad(self.rotation_speed * dt))
    go.set_rotation(current_rotation * delta_rotation)
end

local function spawn_powerup(self)
    local powerup_type = math.random(1, 4)
    local powerup_position = go.get_position()
    powerup_position.y = powerup_position.y - 20 -- should get sprite size instead / 2
    
    print("spawning powerup: "..powerup_type)
    factory.create("/manager#powerup_"..powerup_type.."_factory", powerup_position)
end

local function die(self, from_player)
    audio_manager.unsubscribe(msg.url("."))
    msg.post("main:/camera", "shake", { duration = 0.3, magnitude = 0.1 })

    if from_player then
        msg.post("/gui#floating_text", "show_floating_text", { position = go.get_position(), text = "+"..self.score_value })
        msg.post("/manager#level", "update_score", { score = self.score_value })
         -- random chance to spawn a powerup
        local spawn_powerup_chance = math.random(1, 10)
        if spawn_powerup_chance <= 10 then
            spawn_powerup(self)
        end
    end

    particlefx.play("#death_explosion")
    audio_manager.play_sound_effect("Combat/Death")

    go.delete()
end

local function take_damage(self, damage)
    particlefx.play("#damage_explosion")
    msg.post("main:/camera", "shake", { duration = 0.1, magnitude = 0.05 })
    audio_manager.play_sound_effect("Combat/Death")
    self.health = self.health - damage
    if self.health <= 0 then
        die(self, true)
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("beat") then
        local pos = go.get_position()
        local dir_to_player = self.target_pos - pos
        local distance_to_player = vmath.length(dir_to_player)

        if distance_to_player > 10 then -- Stopping distance
            local move_dir = vmath.normalize(dir_to_player)
            local move_distance = self.speed -- Adjust this value if you want bigger or smaller jumps
            local new_pos = pos + move_dir * move_distance
            print("new pos:" .. pos.x .. "," .. pos.y)
            go.set_position(new_pos)
        end  
    elseif message_id == hash("collision_response") then
        print (message.other_id)
        -- hash needs to include the collection proxy
        if (message.group == hash("player")) then
            -- Player collision
            print ("collision player")
            msg.post(message.other_id, "take_damage", {damage = 1})
            die(self, false)
        elseif (message.group == hash("bullet")) then
            -- Bullet collision
            print("collision bullet")
            go.delete(message.other_id)
            
            -- recieve the damage from the player
            msg.post("/player#player", "get_damage_to_take")
        end  
    elseif message_id == hash("take_damage") then
        take_damage(self, message.damage)
    end
end

function final(self)
	audio_manager.unsubscribe(msg.url("."))
end